---
openapi: 3.0.0
info:
  title: Frontend Driver Interface
  description: These are the APIs exposed by our backend SDK. To be consumed by the frontend only.
  contact:
    email: team@supertokens.io
  version: 1.16.0
servers:
- url: /
tags:
- name: Session Recipe
- name: EmailPassword Recipe
- name: ThirdParty Recipe
- name: ThirdPartyEmailPassword Recipe
- name: Passwordless Recipe
- name: ThirdPartyPasswordless Recipe
- name: EmailVerification Recipe
- name: JWT Recipe
- name: OpenId Recipe
paths:
  /{apiBasePath}/signinup/code⠀:
    post:
      tags:
      - ThirdPartyPasswordless Recipe
      description: "Start sign in/up process with passwordless.\n\nNote: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. \n"
      operationId: thirdPartyPasswordlessSignInUpStart
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdpartypasswordless
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signinup_code_body'
      responses:
        "200":
          description: Started the passwordless sign in/up process.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signinup/code/resend⠀:
    post:
      tags:
      - ThirdPartyPasswordless Recipe
      description: "Resend passwordless code\n\nNote: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. \n"
      operationId: thirdPartyPasswordlessSignInUpResend
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdpartypasswordless
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/code_resend_body'
      responses:
        "200":
          description: Started the passwordless sign in/up process.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signinup/code/consume⠀:
    post:
      tags:
      - ThirdPartyPasswordless Recipe
      description: "Finish sign in/up process with passwordless\n\nNote: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. \n"
      operationId: thirdPartyPasswordlessSignInUpConsume
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdpartypasswordless
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/code_consume_body'
      responses:
        "200":
          description: Signin/up a user
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              style: simple
              explode: false
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax
            st-access-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            st-refresh-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            anti-csrf:
              description: If enabled by the user
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              style: simple
              explode: false
              schema:
                type: string
                example: anti-csrf, front-token, st-access-token, st-refresh-token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signup/email/exists⠀⠀⠀:
    get:
      tags:
      - ThirdPartyPasswordless Recipe
      description: "Check if an email exists\n\nNote: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. \n"
      operationId: thirdPartyPasswordlessEmailExists
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdpartypasswordless
      - name: email
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: johndoe@gmail.com
      responses:
        "200":
          description: Checks if an email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signup/phonenumber/exists⠀:
    get:
      tags:
      - ThirdPartyPasswordless Recipe
      description: "Check if a phone number exists\n\nNote: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. \n"
      operationId: thirdPartyPasswordlessPhoneNumberExists
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdpartypasswordless
      - name: phoneNumber
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: "0036701234567"
      responses:
        "200":
          description: Checks if an email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signinup⠀⠀:
    post:
      tags:
      - ThirdPartyPasswordless Recipe
      description: "Signin/up a user using a Social Provider\n\nNote: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. \n"
      operationId: thirdPartyPasswordlessSignInUp
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdpartypasswordless
      requestBody:
        description: Should contain one of code or authCodeResponse, clientId is optional
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiBasePath_signinup_body'
      responses:
        "200":
          description: Signin/up a user
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              style: simple
              explode: false
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax
            st-access-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            st-refresh-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            anti-csrf:
              description: If enabled by the user
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              style: simple
              explode: false
              schema:
                type: string
                example: anti-csrf, front-token, st-access-token, st-refresh-token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/authorisationurl⠀⠀:
    get:
      tags:
      - ThirdPartyPasswordless Recipe
      description: "Signin/up a user\n\nNote: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. \n"
      operationId: thirdPartyPasswordlessAuthorisationUrl
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdpartypasswordless
      - name: thirdPartyId
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/thirdPartyId'
      responses:
        "200":
          description: Get the OAuth authorisation URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/callback/apple⠀⠀:
    post:
      tags:
      - ThirdPartyPasswordless Recipe
      description: "Handles sign in with the apple.\n\nNote: There is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. \n"
      operationId: thirdPartyPasswordlessCallbackApple
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/callback_apple_body'
      responses:
        "200":
          description: Returns an HTML page which will redirect the user to the client's app.
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signinup/code:
    post:
      tags:
      - Passwordless Recipe
      description: |
        Start sign in/up process with passwordless
      operationId: passwordlessSignInUpStart
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: passwordless
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signinup_code_body_1'
      responses:
        "200":
          description: Started the passwordless sign in/up process.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signinup/code/resend:
    post:
      tags:
      - Passwordless Recipe
      description: |
        Resend passwordless code
      operationId: passwordlessSignInUpResend
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: passwordless
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/code_resend_body_1'
      responses:
        "200":
          description: Started the passwordless sign in/up process.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signinup/code/consume:
    post:
      tags:
      - Passwordless Recipe
      description: |
        Finish sign in/up process with passwordless
      operationId: passwordlessSignInUpConsume
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: passwordless
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/code_consume_body_1'
      responses:
        "200":
          description: Signin/up a user
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              style: simple
              explode: false
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax
            st-access-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            st-refresh-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            anti-csrf:
              description: If enabled by the user
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              style: simple
              explode: false
              schema:
                type: string
                example: anti-csrf, front-token, st-access-token, st-refresh-token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signup/email/exists⠀⠀:
    get:
      tags:
      - Passwordless Recipe
      description: "Check if an email exists\nNote that there is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. \n"
      operationId: passwordlessEmailExists
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: passwordless
      - name: email
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: johndoe@gmail.com
      responses:
        "200":
          description: Checks if an email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signup/phonenumber/exists:
    get:
      tags:
      - Passwordless Recipe
      description: |
        Check if an email exists
      operationId: passwordlessPhoneNumberExists
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: passwordless
      - name: phoneNumber
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: "0036701234567"
      responses:
        "200":
          description: Checks if an email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signout:
    post:
      tags:
      - Session Recipe
      description: |
        Logout user
      operationId: signout
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: session
      - name: anti-csrf
        in: header
        description: This will only be here if enabled by the user.
        required: false
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/token'
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Logout user
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: sAccessToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax sRefreshToken=; Path=/auth/session/refresh; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; SameSite=Lax
            st-access-token:
              description: Set to an empty string to trigger token clearing in the client SDK
              style: simple
              explode: false
              schema:
                type: string
                example: ""
            st-refresh-token:
              description: Set to an empty string to trigger token clearing in the client SDK
              style: simple
              explode: false
              schema:
                type: string
                example: ""
            front-token:
              style: simple
              explode: false
              schema:
                type: string
                example: remove
            Access-Control-Expose-Headers:
              style: simple
              explode: false
              schema:
                type: string
                example: front-token, st-access-token, st-refresh-token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
      security:
      - AccessTokenBearer: []
      - AccessTokenCookie: []
  /{apiBasePath}/session/refresh:
    post:
      tags:
      - Session Recipe
      description: |
        Refresh the user session
      operationId: refresh
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: session
      - name: anti-csrf
        in: header
        description: This will only be here if enabled by the user.
        required: false
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/token'
      responses:
        "200":
          description: Refresh users
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              style: simple
              explode: false
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax
            st-access-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            st-refresh-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            anti-csrf:
              description: If enabled by the user
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              style: simple
              explode: false
              schema:
                type: string
                example: anti-csrf, front-token, st-access-token, st-refresh-token
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
      security:
      - RefreshTokenBearer: []
      - RefreshTokenCookie: []
  /{apiBasePath}/signin:
    post:
      tags:
      - EmailPassword Recipe
      description: |
        Signin a user with email ID and password
      operationId: signIn
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: session
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiBasePath_signin_body'
      responses:
        "200":
          description: Sign in Response
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              style: simple
              explode: false
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax
            st-access-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            st-refresh-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            anti-csrf:
              description: If enabled by the user
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              style: simple
              explode: false
              schema:
                type: string
                example: anti-csrf, front-token, st-access-token, st-refresh-token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signup:
    post:
      tags:
      - EmailPassword Recipe
      description: |
        Signup a user with email ID and password
      operationId: signUp
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: emailpassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiBasePath_signup_body'
      responses:
        "200":
          description: Sign up Response
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              style: simple
              explode: false
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax
            st-access-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            st-refresh-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            anti-csrf:
              description: If enabled by the user
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              style: simple
              explode: false
              schema:
                type: string
                example: anti-csrf, front-token, st-access-token, st-refresh-token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signup/email/exists:
    get:
      tags:
      - EmailPassword Recipe
      description: |
        Check if an email exists
      operationId: emailExists
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: emailpassword
      - name: email
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: johndoe@gmail.com
      responses:
        "200":
          description: Checks if an email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/user/password/reset/token:
    post:
      tags:
      - EmailPassword Recipe
      description: |
        Generate a new reset password token for this user
      operationId: passwordResetToken
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: emailpassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reset_token_body'
      responses:
        "200":
          description: Generate a new reset password token for this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/user/password/reset:
    post:
      tags:
      - EmailPassword Recipe
      description: |
        Reset a password using password reset token
      operationId: passwordReset
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: emailpassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/password_reset_body'
      responses:
        "200":
          description: Reset a password using password reset token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signinup:
    post:
      tags:
      - ThirdParty Recipe
      description: |
        Signin/up a user
      operationId: signInUp
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdparty
      requestBody:
        description: Should contain one of code or authCodeResponse, clientId is optional
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiBasePath_signinup_body_1'
      responses:
        "200":
          description: Signin/up a user
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              style: simple
              explode: false
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax
            st-access-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            st-refresh-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            anti-csrf:
              description: If enabled by the user
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              style: simple
              explode: false
              schema:
                type: string
                example: anti-csrf, front-token, st-access-token, st-refresh-token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/authorisationurl:
    get:
      tags:
      - ThirdParty Recipe
      description: |
        Signin/up a user
      operationId: authorisationUrl
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdparty
      - name: thirdPartyId
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/thirdPartyId'
      responses:
        "200":
          description: Get the OAuth authorisation URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/callback/apple:
    post:
      tags:
      - ThirdParty Recipe
      description: |
        Handles sign in with the apple.
      operationId: thirdPartyCallbackApple
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/callback_apple_body_1'
      responses:
        "200":
          description: Returns an HTML page which will redirect the user to the client's app.
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signin⠀:
    post:
      tags:
      - ThirdPartyEmailPassword Recipe
      description: |
        Signin a user with email ID and password
      operationId: thirdPartyEmailPasswordsignIn
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdpartyemailpassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiBasePath_signin_body_1'
      responses:
        "200":
          description: Sign in Response
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              style: simple
              explode: false
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax
            st-access-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            st-refresh-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            anti-csrf:
              description: If enabled by the user
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              style: simple
              explode: false
              schema:
                type: string
                example: anti-csrf, front-token, st-access-token, st-refresh-token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signup⠀:
    post:
      tags:
      - ThirdPartyEmailPassword Recipe
      description: |
        Signup a user with email ID and password
      operationId: thirdPartyEmailPasswordsignUp
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdpartyemailpassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiBasePath_signup_body_1'
      responses:
        "200":
          description: Sign up Response
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              style: simple
              explode: false
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax
            st-access-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            st-refresh-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            anti-csrf:
              description: If enabled by the user
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              style: simple
              explode: false
              schema:
                type: string
                example: anti-csrf, front-token, st-access-token, st-refresh-token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signup/email/exists⠀:
    get:
      tags:
      - ThirdPartyEmailPassword Recipe
      description: |
        Check if an email exists
      operationId: thirdPartyEmailPasswordEmailExists
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdpartyemailpassword
      - name: email
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: johndoe@gmail.com
      responses:
        "200":
          description: Checks if an email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/user/password/reset/token⠀:
    post:
      tags:
      - ThirdPartyEmailPassword Recipe
      description: |
        Generate a new reset password token for this user
      operationId: thirdPartyEmailPasswordPasswordResetToken
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdpartyemailpassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reset_token_body_1'
      responses:
        "200":
          description: Generate a new reset password token for this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/user/password/reset⠀:
    post:
      tags:
      - ThirdPartyEmailPassword Recipe
      description: |
        Reset a password using password reset token
      operationId: thirdPartyEmailPasswordPasswordReset
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdpartyemailpassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/password_reset_body_1'
      responses:
        "200":
          description: Reset a password using password reset token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/signinup⠀:
    post:
      tags:
      - ThirdPartyEmailPassword Recipe
      description: |
        Signin/up a user using a Social Provider
      operationId: thirdPartyEmailPasswordSignInUp
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdpartyemailpassword
      requestBody:
        description: Should contain one of code or authCodeResponse, clientId is optional
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiBasePath_signinup_body_2'
      responses:
        "200":
          description: Signin/up a user
          headers:
            Set-Cookie:
              description: In cookie-based sessions
              style: simple
              explode: false
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax; sRefreshToken=K91cQ7ezMbu...cb61c3.V2; Path=/auth/session/refresh; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax
            st-access-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            st-refresh-token:
              description: In header-based sessions
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            anti-csrf:
              description: If enabled by the user
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              style: simple
              explode: false
              schema:
                type: string
                example: anti-csrf, front-token, st-access-token, st-refresh-token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/authorisationurl⠀:
    get:
      tags:
      - ThirdPartyEmailPassword Recipe
      description: |
        Signin/up a user
      operationId: thirdPartyEmailPasswordAuthorisationUrl
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: thirdpartyemailpassword
      - name: thirdPartyId
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/thirdPartyId'
      responses:
        "200":
          description: Get the OAuth authorisation URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/callback/apple⠀:
    post:
      tags:
      - ThirdPartyEmailPassword Recipe
      description: |
        Handles sign in with the apple.
      operationId: thirdPartyEmailPasswordCallbackApple
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/callback_apple_body_2'
      responses:
        "200":
          description: Returns an HTML page which will redirect the user to the client's app.
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/user/email/verify/token:
    post:
      tags:
      - EmailVerification Recipe
      description: |
        Send email verification email
      operationId: verifyEmailToken
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: emailverification
      - name: anti-csrf
        in: header
        description: This will only be here if enabled by the user.
        required: false
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/token'
      responses:
        "200":
          description: Send email verification email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_11'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
      security:
      - AccessTokenBearer: []
      - AccessTokenCookie: []
  /{apiBasePath}/user/email/verify:
    get:
      tags:
      - EmailVerification Recipe
      description: |
        Checks if an email is verified and adds this information into the access token payload as well
      operationId: getVerifyEmail
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: emailverification
      - name: anti-csrf
        in: header
        description: This will only be here if enabled by the user.
        required: false
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/token'
      responses:
        "200":
          description: Checks if an email is verified and adds this information into the access token payload as well
          headers:
            Set-Cookie:
              description: Sent in cookie-based sessions if the access token payload is updated
              style: simple
              explode: false
              schema:
                type: string
                example: sAccessToken=eyJhb...%3D%3D; Path=/; Expires=Tue, 22 Jun 2021 07:43:07 GMT; HttpOnly; SameSite=Lax
            st-access-token:
              description: Sent in cookie-based sessions if the access token payload is updated
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            anti-csrf:
              description: Sent if enabled by the user
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            front-token:
              description: Sent if the access token payload is updated
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/token'
            Access-Control-Expose-Headers:
              style: simple
              explode: false
              schema:
                type: string
                example: anti-csrf, front-token, st-access-token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_12'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
      security:
      - AccessTokenBearer: []
      - AccessTokenCookie: []
    post:
      tags:
      - EmailVerification Recipe
      description: |
        Verify an email
      operationId: verifyEmail
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      - name: rid
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: emailverification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/email_verify_body'
      responses:
        "200":
          description: Verify an email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_13'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/jwt/jwks.json:
    get:
      tags:
      - JWT Recipe
      description: |
        Get all JSON web keys for JWT verification
      operationId: getJWKS
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      responses:
        "200":
          description: Retrieve JWKs for JWT verification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_14'
        "400":
          description: error code 400
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/badRequest'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /{apiBasePath}/.well-known/openid-configuration:
    get:
      tags:
      - OpenId Recipe
      description: |
        Get OpenID discovery configuration
      operationId: getOpenIdDiscoveryConfiguration
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      responses:
        "200":
          description: Retrieve OpenID configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_15'
        "400":
          description: error code 400
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/badRequest'
        "404":
          description: error code 404
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/notFound'
        "500":
          description: error code 500
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/internalError'
  /example:
    get:
      tags:
      - App API
      description: |
        API endpoint in your application, checked with `verifySession`
      operationId: exampleAppAPI
      parameters:
      - name: apiBasePath
        in: path
        description: Its value depends on the apiBasePath set by the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: auth
      responses:
        "200":
          description: The session passed verification and went through the application code
        "401":
          description: The session doesn't exists or if it needs to be refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: The session exists, but didn't pass a claim validator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
components:
  schemas:
    statusOK:
      type: string
      enum:
      - OK
    generalErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - GENERAL_ERROR
        message:
          type: string
    token:
      type: string
      example: ZTRiOTBjNz...jI5MTZlODkxw
    cookie:
      type: string
      example: ed3164...06c0d; Path=/; Expires=Thu, 30 Sep 2021 06:43:07 GMT; HttpOnly; SameSite=Lax
    id:
      type: string
      enum:
      - email
      - password
    userId:
      type: string
      example: fa7a0841-b533-4478-95533-0fde890c3483
    thirdPartyUser:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/userId'
        email:
          type: string
          example: johndoe@gmail.com
        timeJoined:
          type: number
          example: 1638433545183
        thirdParty:
          $ref: '#/components/schemas/thirdPartyUser_thirdParty'
    user:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/userId'
        email:
          type: string
          example: johndoe@gmail.com
        timeJoined:
          type: number
          example: 1638433545183
    email:
      type: string
      example: johndoe@gmail.com
    phoneNumber:
      type: string
      example: "0036701234567"
    deviceId:
      type: string
      description: This should be saved on the starting device to enable the manual code entry flow.
      example: TU/52WOcktSv99zqaAZuWJG9BSoS0aRLfCbep8rFEwk=
    preAuthSessionId:
      type: string
      description: An identifier that used to identify the login attempt/device.
      example: kFmkPQEAJtACiT2w/K8fndEuNm+XozJXSZSlWEr+iGs=
    passwordlessUser:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/userId'
        email:
          $ref: '#/components/schemas/email'
        phoneNumber:
          $ref: '#/components/schemas/phoneNumber'
        timeJoined:
          type: number
          example: 1638433545183
    thirdPartyId:
      type: string
      example: google
    exists:
      type: boolean
      example: true
    method:
      type: string
      example: token
    code:
      $ref: '#/components/schemas/token'
    authCodeResponse:
      required:
      - access_token
      type: object
      properties:
        access_token:
          type: string
        id_token:
          type: string
      description: Can contain random data other than the two listed below
    redirectURI:
      type: string
      example: https://yourdomain.com/callback
    formFields:
      type: array
      example:
      - id: email
        value: johndoe@gmail.com
      - id: password
        value: testPass123
      items:
        $ref: '#/components/schemas/formFields_inner'
    signInResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/statusOK'
        user:
          $ref: '#/components/schemas/user'
    signupResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/statusOK'
        user:
          $ref: '#/components/schemas/user'
    passwordResetTokenResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/statusOK'
    signinupResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/statusOK'
        user:
          $ref: '#/components/schemas/thirdPartyUser'
        createdNewUser:
          type: boolean
          example: true
    passwordResetResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - OK
          - RESET_PASSWORD_INVALID_TOKEN_ERROR
    fieldErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - FIELD_ERROR
        formFields:
          type: array
          items:
            $ref: '#/components/schemas/fieldErrorResponse_formFields'
    wrongCredentialsResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - WRONG_CREDENTIALS_ERROR
    noEmailGivenByProviderResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - NO_EMAIL_GIVEN_BY_PROVIDER
    internalError:
      type: string
      enum:
      - Internal Error
    badRequest:
      type: string
      enum:
      - Bad request
    notFound:
      type: string
      enum:
      - Not Found
    signinup_code_body:
      oneOf:
      - required:
        - email
        type: object
        properties:
          email:
            $ref: '#/components/schemas/email'
      - required:
        - phoneNumber
        type: object
        properties:
          phoneNumber:
            $ref: '#/components/schemas/phoneNumber'
      - $ref: '#/components/schemas/generalErrorResponse'
    inline_response_200:
      oneOf:
      - type: object
        properties:
          status:
            $ref: '#/components/schemas/statusOK'
          deviceId:
            $ref: '#/components/schemas/deviceId'
          preAuthSessionId:
            $ref: '#/components/schemas/preAuthSessionId'
          flowType:
            type: string
            enum:
            - MAGIC_LINK
            - USER_INPUT_CODE_AND_MAGIC_LINK
            - USER_INPUT_CODE
      - $ref: '#/components/schemas/generalErrorResponse'
    code_resend_body:
      required:
      - deviceId
      - preAuthSessionId
      type: object
      properties:
        deviceId:
          $ref: '#/components/schemas/deviceId'
        preAuthSessionId:
          $ref: '#/components/schemas/preAuthSessionId'
    inline_response_200_1:
      oneOf:
      - type: object
        properties:
          status:
            type: string
            enum:
            - OK
            - RESTART_FLOW_ERROR
      - $ref: '#/components/schemas/generalErrorResponse'
    code_consume_body:
      oneOf:
      - required:
        - linkCode
        - preAuthSessionId
        type: object
        properties:
          preAuthSessionId:
            $ref: '#/components/schemas/preAuthSessionId'
          linkCode:
            type: string
            example: b10lbT_SnDC4flA6Fn7pE5TtG5k5NfigLef4QMBeGA8
      - required:
        - deviceId
        - preAuthSessionId
        - userInputCode
        type: object
        properties:
          preAuthSessionId:
            $ref: '#/components/schemas/preAuthSessionId'
          deviceId:
            $ref: '#/components/schemas/deviceId'
          userInputCode:
            type: string
            example: "432123"
    inline_response_200_2:
      oneOf:
      - type: object
        properties:
          status:
            $ref: '#/components/schemas/statusOK'
          createdNewUser:
            type: boolean
            example: true
          user:
            $ref: '#/components/schemas/passwordlessUser'
      - type: object
        properties:
          status:
            type: string
            enum:
            - INCORRECT_USER_INPUT_CODE_ERROR
            - EXPIRED_USER_INPUT_CODE_ERROR
          failedCodeInputAttemptCount:
            type: number
            example: 2
          maximumCodeInputAttempts:
            type: number
            example: 5
      - type: object
        properties:
          status:
            type: string
            enum:
            - RESTART_FLOW_ERROR
      - $ref: '#/components/schemas/generalErrorResponse'
    inline_response_200_3:
      oneOf:
      - type: object
        properties:
          status:
            $ref: '#/components/schemas/statusOK'
          exists:
            $ref: '#/components/schemas/exists'
      - $ref: '#/components/schemas/generalErrorResponse'
    apiBasePath_signinup_body:
      type: object
      properties:
        redirectURI:
          $ref: '#/components/schemas/redirectURI'
        thirdPartyId:
          $ref: '#/components/schemas/thirdPartyId'
        code:
          $ref: '#/components/schemas/code'
        authCodeResponse:
          $ref: '#/components/schemas/authCodeResponse'
        clientId:
          type: string
          example: 6779ef20e7...5817b79602
    inline_response_200_4:
      oneOf:
      - $ref: '#/components/schemas/signinupResponse'
      - $ref: '#/components/schemas/noEmailGivenByProviderResponse'
      - $ref: '#/components/schemas/generalErrorResponse'
    inline_response_200_5:
      oneOf:
      - type: object
        properties:
          status:
            $ref: '#/components/schemas/statusOK'
          url:
            type: string
            example: https://providerdomain.com/authorize?client_id=..&scope=..&access_type=..
      - $ref: '#/components/schemas/generalErrorResponse'
    callback_apple_body:
      type: object
      properties:
        code:
          type: string
          description: The Authorization code which will be exchanged for an access token
        state:
          type: string
          description: A unique string used to mitigate CSRF attacks
    signinup_code_body_1:
      oneOf:
      - required:
        - email
        type: object
        properties:
          email:
            $ref: '#/components/schemas/email'
      - required:
        - phoneNumber
        type: object
        properties:
          phoneNumber:
            $ref: '#/components/schemas/phoneNumber'
    code_resend_body_1:
      required:
      - deviceId
      - preAuthSessionId
      type: object
      properties:
        deviceId:
          $ref: '#/components/schemas/deviceId'
        preAuthSessionId:
          $ref: '#/components/schemas/preAuthSessionId'
    code_consume_body_1:
      oneOf:
      - required:
        - linkCode
        - preAuthSessionId
        type: object
        properties:
          preAuthSessionId:
            $ref: '#/components/schemas/preAuthSessionId'
          linkCode:
            type: string
            example: b10lbT_SnDC4flA6Fn7pE5TtG5k5NfigLef4QMBeGA8
      - required:
        - deviceId
        - preAuthSessionId
        - userInputCode
        type: object
        properties:
          preAuthSessionId:
            $ref: '#/components/schemas/preAuthSessionId'
          deviceId:
            $ref: '#/components/schemas/deviceId'
          userInputCode:
            type: string
            example: "432123"
    inline_response_200_6:
      oneOf:
      - type: object
        properties:
          status:
            $ref: '#/components/schemas/statusOK'
      - $ref: '#/components/schemas/generalErrorResponse'
    apiBasePath_signin_body:
      type: object
      properties:
        formFields:
          $ref: '#/components/schemas/formFields'
    inline_response_200_7:
      oneOf:
      - $ref: '#/components/schemas/signInResponse'
      - $ref: '#/components/schemas/fieldErrorResponse'
      - $ref: '#/components/schemas/wrongCredentialsResponse'
      - $ref: '#/components/schemas/generalErrorResponse'
    apiBasePath_signup_body:
      type: object
      properties:
        formFields:
          $ref: '#/components/schemas/formFields'
    inline_response_200_8:
      oneOf:
      - $ref: '#/components/schemas/signupResponse'
      - $ref: '#/components/schemas/fieldErrorResponse'
      - $ref: '#/components/schemas/generalErrorResponse'
    reset_token_body:
      type: object
      properties:
        formFields:
          $ref: '#/components/schemas/formFields'
      example:
        formFields:
        - id: email
          value: test@email.com
    inline_response_200_9:
      oneOf:
      - $ref: '#/components/schemas/passwordResetTokenResponse'
      - $ref: '#/components/schemas/fieldErrorResponse'
      - $ref: '#/components/schemas/generalErrorResponse'
    password_reset_body:
      type: object
      properties:
        method:
          $ref: '#/components/schemas/method'
        formfields:
          $ref: '#/components/schemas/formFields'
        token:
          $ref: '#/components/schemas/token'
      example:
        method: token
        formFields:
        - id: password
          value: newPass123
        token: ZTRiOTBjNz...jI5MTZlODkxw
    inline_response_200_10:
      oneOf:
      - $ref: '#/components/schemas/passwordResetResponse'
      - $ref: '#/components/schemas/fieldErrorResponse'
      - $ref: '#/components/schemas/generalErrorResponse'
    apiBasePath_signinup_body_1:
      type: object
      properties:
        redirectURI:
          $ref: '#/components/schemas/redirectURI'
        thirdPartyId:
          $ref: '#/components/schemas/thirdPartyId'
        code:
          $ref: '#/components/schemas/code'
        authCodeResponse:
          $ref: '#/components/schemas/authCodeResponse'
        clientId:
          type: string
          example: 6779ef20e7...5817b79602
    callback_apple_body_1:
      type: object
      properties:
        code:
          type: string
          description: The Authorization code which will be exchanged for an access token
        state:
          type: string
          description: A unique string used to mitigate CSRF attacks
    apiBasePath_signin_body_1:
      type: object
      properties:
        formFields:
          $ref: '#/components/schemas/formFields'
    apiBasePath_signup_body_1:
      type: object
      properties:
        formFields:
          $ref: '#/components/schemas/formFields'
    reset_token_body_1:
      type: object
      properties:
        formFields:
          $ref: '#/components/schemas/formFields'
      example:
        formFields:
        - id: email
          value: test@email.com
    password_reset_body_1:
      type: object
      properties:
        method:
          $ref: '#/components/schemas/method'
        formfields:
          $ref: '#/components/schemas/formFields'
        token:
          $ref: '#/components/schemas/token'
      example:
        method: token
        formFields:
        - id: password
          value: newPass123
        token: ZTRiOTBjNz...jI5MTZlODkxw
    apiBasePath_signinup_body_2:
      type: object
      properties:
        redirectURI:
          $ref: '#/components/schemas/redirectURI'
        thirdPartyId:
          $ref: '#/components/schemas/thirdPartyId'
        code:
          $ref: '#/components/schemas/code'
        authCodeResponse:
          $ref: '#/components/schemas/authCodeResponse'
        clientId:
          type: string
          example: 6779ef20e7...5817b79602
    callback_apple_body_2:
      type: object
      properties:
        code:
          type: string
          description: The Authorization code which will be exchanged for an access token
        state:
          type: string
          description: A unique string used to mitigate CSRF attacks
    inline_response_200_11:
      oneOf:
      - type: object
        properties:
          status:
            type: string
            enum:
            - OK
            - EMAIL_ALREADY_VERIFIED_ERROR
      - $ref: '#/components/schemas/generalErrorResponse'
    inline_response_200_12:
      oneOf:
      - type: object
        properties:
          status:
            $ref: '#/components/schemas/statusOK'
          isVerified:
            type: boolean
            example: true
      - $ref: '#/components/schemas/generalErrorResponse'
    email_verify_body:
      type: object
      properties:
        method:
          $ref: '#/components/schemas/method'
        token:
          $ref: '#/components/schemas/token'
    inline_response_200_13:
      oneOf:
      - type: object
        properties:
          status:
            type: string
            enum:
            - OK
            - EMAIL_VERIFICATION_INVALID_TOKEN_ERROR
      - $ref: '#/components/schemas/generalErrorResponse'
    inline_response_200_14:
      oneOf:
      - type: object
        properties:
          keys:
            type: array
            items:
              $ref: '#/components/schemas/inline_response_200_14_keys'
      - $ref: '#/components/schemas/generalErrorResponse'
    inline_response_200_15:
      oneOf:
      - type: object
        properties:
          issuer:
            type: string
            description: URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier (https://openid.net/specs/openid-connect-discovery-1_0.html section 3)
            example: https://api.example.com/auth
          jwks_uri:
            type: string
            description: URL for fetching a list JsonWebKey, used for JWT signature verification. Refer to /jwt/jwks.json API in the JWT recipe for JWK details
            example: https://api.example.com/auth/jwt/jwks.json
      - $ref: '#/components/schemas/generalErrorResponse'
    inline_response_401:
      type: object
      properties:
        message:
          type: string
          description: unauthorised or try refresh token
          example: try refresh token
    inline_response_403:
      type: object
      properties:
        message:
          type: string
          example: invalid claim
        claimValidationErrors:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_403_claimValidationErrors'
    thirdPartyUser_thirdParty:
      type: object
      properties:
        id:
          type: string
          example: google
        userId:
          type: string
          example: rq238mrq2389rvq123213
    formFields_inner:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        value:
          type: string
    fieldErrorResponse_formFields:
      type: object
      properties:
        id:
          type: string
          example: email
        error:
          type: string
          example: Error Message
    inline_response_200_14_keys:
      type: object
      properties:
        alg:
          type: string
          description: The algorithm to use when creating the JWT.
          enum:
          - RS256
        kty:
          type: string
          example: RSA
        use:
          type: string
          example: sig
        kid:
          type: string
          description: Unique identifier for the JWK
        n:
          type: string
          description: Modulus for the key
        e:
          type: string
          description: Exponent for the key
      description: A JWK that can be used to verify a JWT
    inline_response_403_claimValidationErrors:
      type: object
      properties:
        id:
          type: string
          example: st-ev
        reason:
          type: object
          example:
            message: value does not exist
            expectedValue: val
            actualValue: claimVal
  responses:
    "500":
      description: error code 500
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/internalError'
    "400":
      description: error code 400
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/badRequest'
    "404":
      description: error code 404
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/notFound'
  parameters:
    rid:
      name: rid
      in: header
      required: false
      style: simple
      explode: false
      schema:
        type: string
      example: session
    emailPasswordRid:
      name: rid
      in: header
      required: false
      style: simple
      explode: false
      schema:
        type: string
      example: emailpassword
    thirdPartyRid:
      name: rid
      in: header
      required: false
      style: simple
      explode: false
      schema:
        type: string
      example: thirdparty
    thirdPartyEmailPasswordRid:
      name: rid
      in: header
      required: false
      style: simple
      explode: false
      schema:
        type: string
      example: thirdpartyemailpassword
    passwordlessRid:
      name: rid
      in: header
      required: false
      style: simple
      explode: false
      schema:
        type: string
      example: passwordless
    thirdPartyPasswordlessRid:
      name: rid
      in: header
      required: false
      style: simple
      explode: false
      schema:
        type: string
      example: thirdpartypasswordless
    emailVerificationRid:
      name: rid
      in: header
      required: false
      style: simple
      explode: false
      schema:
        type: string
      example: emailverification
    anti-csrf:
      name: anti-csrf
      in: header
      description: This will only be here if enabled by the user.
      required: false
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/token'
    apiBasePath:
      name: apiBasePath
      in: path
      description: Its value depends on the apiBasePath set by the user
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: auth
    email:
      name: email
      in: query
      required: true
      style: form
      explode: true
      schema:
        type: string
        example: johndoe@gmail.com
    phoneNumber:
      name: phoneNumber
      in: query
      required: true
      style: form
      explode: true
      schema:
        type: string
        example: "0036701234567"
  securitySchemes:
    AccessTokenCookie:
      type: apiKey
      description: This is an HTTPOnly cookie, set by sign-in and refresh endpoints and present on requests that update the access token
      name: sAccessToken
      in: cookie
    AccessTokenBearer:
      type: http
      description: Returned as the "st-access-token" header from sign-in and refresh endpoints and present on requests that update the access token payload
      scheme: bearer
    RefreshTokenBearer:
      type: http
      description: This is an HTTPOnly cookie, set by sign-in and refresh endpoints
      scheme: bearer
    RefreshTokenCookie:
      type: apiKey
      description: Returned as the "st-refresh-token" header from sign-in and refresh endpoints
      name: sRefreshToken
      in: cookie
